From 2bd69ea06264e12f54a0e664f6cabe7d9d4d112f Mon Sep 17 00:00:00 2001
From: Andrew Steinborn <git@steinborn.me>
Date: Fri, 23 Aug 2019 16:02:34 -0400
Subject: [PATCH] Bukkit scheduler rewrite


diff --git a/src/main/java/com/canyonmodded/scheduler/CanyonBukkitTask.java b/src/main/java/com/canyonmodded/scheduler/CanyonBukkitTask.java
new file mode 100644
index 00000000..9b89de4a
--- /dev/null
+++ b/src/main/java/com/canyonmodded/scheduler/CanyonBukkitTask.java
@@ -0,0 +1,89 @@
+package com.canyonmodded.scheduler;
+
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitTask;
+
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class CanyonBukkitTask implements BukkitTask, Runnable, Comparable<CanyonBukkitTask> {
+
+    private static final Logger logger = Logger.getLogger("Minecraft");
+    private static final AtomicInteger ID_GENERATOR = new AtomicInteger();
+
+    private final Plugin owner;
+    private final long delayInTicks;
+    private final long repeatInTicks;
+    private final int id;
+    private final boolean sync;
+    private long nextTickExecution;
+    private final Runnable runnable;
+    private boolean cancelled;
+
+    public CanyonBukkitTask(Plugin owner, long delayInTicks, long repeatInTicks, boolean sync, Runnable runnable) {
+        this.owner = owner;
+        this.delayInTicks = delayInTicks;
+        this.repeatInTicks = repeatInTicks;
+        this.sync = sync;
+        this.nextTickExecution = MinecraftServer.currentTick + delayInTicks;
+        this.runnable = runnable;
+        this.id = ID_GENERATOR.incrementAndGet();
+        this.cancelled = false;
+    }
+
+    @Override
+    public int getTaskId() {
+        return id;
+    }
+
+    @Override
+    public Plugin getOwner() {
+        return owner;
+    }
+
+    @Override
+    public boolean isSync() {
+        return sync;
+    }
+
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    public void cancel() {
+        this.cancelled = true;
+    }
+
+    public long getNextTickExecution() {
+        return nextTickExecution;
+    }
+
+    public boolean updateTaskWillRunAgain() {
+        if (cancelled) {
+            return false;
+        }
+        if (repeatInTicks <= 0) {
+            return false;
+        }
+        nextTickExecution = MinecraftServer.currentTick + repeatInTicks;
+        return true;
+    }
+
+    @Override
+    public int compareTo(CanyonBukkitTask o) {
+        int c = Long.compare(nextTickExecution, o.nextTickExecution);
+        return c == 0 ? Integer.compare(id, o.id) : c;
+    }
+
+    @Override
+    public void run() {
+        try {
+            runnable.run();
+        } catch (Exception e) {
+            logger.log(Level.SEVERE, "Task #" + id + " for plugin " + owner.getDescription().getName() + " v" +
+                    owner.getDescription().getVersion() + " threw an exception", e);
+        }
+    }
+}
diff --git a/src/main/java/com/canyonmodded/scheduler/CanyonFutureTaskAdapter.java b/src/main/java/com/canyonmodded/scheduler/CanyonFutureTaskAdapter.java
new file mode 100644
index 00000000..f50d87ac
--- /dev/null
+++ b/src/main/java/com/canyonmodded/scheduler/CanyonFutureTaskAdapter.java
@@ -0,0 +1,44 @@
+package com.canyonmodded.scheduler;
+
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+public class CanyonFutureTaskAdapter<T> implements Future<T> {
+
+    private final Future<T> backing;
+    private final CanyonBukkitTask systemTask;
+
+    CanyonFutureTaskAdapter(Future<T> backing, CanyonBukkitTask systemTask) {
+        this.backing = backing;
+        this.systemTask = systemTask;
+    }
+
+    @Override
+    public boolean cancel(boolean mayInterruptIfRunning) {
+        boolean isCancelled = this.backing.cancel(mayInterruptIfRunning);
+        this.systemTask.cancel();
+        return isCancelled;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.backing.isCancelled();
+    }
+
+    @Override
+    public boolean isDone() {
+        return this.backing.isDone();
+    }
+
+    @Override
+    public T get() throws InterruptedException, ExecutionException {
+        return this.backing.get();
+    }
+
+    @Override
+    public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
+        return this.backing.get(timeout, unit);
+    }
+}
diff --git a/src/main/java/com/canyonmodded/scheduler/CanyonScheduler.java b/src/main/java/com/canyonmodded/scheduler/CanyonScheduler.java
new file mode 100644
index 00000000..6a753fd4
--- /dev/null
+++ b/src/main/java/com/canyonmodded/scheduler/CanyonScheduler.java
@@ -0,0 +1,164 @@
+package com.canyonmodded.scheduler;
+
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitScheduler;
+import org.bukkit.scheduler.BukkitTask;
+import org.bukkit.scheduler.BukkitWorker;
+
+import java.util.*;
+import java.util.concurrent.*;
+
+public class CanyonScheduler implements BukkitScheduler {
+
+    private final Map<Integer, CanyonBukkitTask> tasksById;
+    private final Queue<CanyonBukkitTask> taskQueue;
+    private final ExecutorService asyncExecutor;
+
+    public CanyonScheduler() {
+        this.tasksById = new HashMap<>();
+        this.taskQueue = new PriorityQueue<>();
+        this.asyncExecutor = Executors.newCachedThreadPool();
+    }
+
+    private CanyonBukkitTask queueTask(Plugin plugin, Runnable runnable, long delay, long repeat, boolean sync) {
+        CanyonBukkitTask task = new CanyonBukkitTask(plugin, delay, repeat, sync, runnable);
+        synchronized (this) {
+            taskQueue.add(task);
+            tasksById.put(task.getTaskId(), task);
+        }
+        return task;
+    }
+
+    @Override
+    public int scheduleSyncDelayedTask(Plugin plugin, Runnable runnable, long delay) {
+        return queueTask(plugin, runnable, delay, 0, true).getTaskId();
+    }
+
+    @Override
+    public int scheduleSyncDelayedTask(Plugin plugin, Runnable runnable) {
+        return queueTask(plugin, runnable, 0, 0, true).getTaskId();
+    }
+
+    @Override
+    public int scheduleSyncRepeatingTask(Plugin plugin, Runnable runnable, long delay, long repeat) {
+        return queueTask(plugin, runnable, delay, repeat, true).getTaskId();
+    }
+
+    @Override
+    public int scheduleAsyncDelayedTask(Plugin plugin, Runnable runnable, long delay) {
+        return queueTask(plugin, runnable, delay, 0, false).getTaskId();
+    }
+
+    @Override
+    public int scheduleAsyncDelayedTask(Plugin plugin, Runnable runnable) {
+        return queueTask(plugin, runnable, 0, 0, false).getTaskId();
+    }
+
+    @Override
+    public int scheduleAsyncRepeatingTask(Plugin plugin, Runnable runnable, long delay, long repeat) {
+        return queueTask(plugin, runnable, delay, repeat, false).getTaskId();
+    }
+
+    @Override
+    public <T> Future<T> callSyncMethod(Plugin plugin, Callable<T> callable) {
+        FutureTask<T> task = new FutureTask<>(callable);
+        return new CanyonFutureTaskAdapter<>(task, queueTask(plugin, task, 0, 0, true));
+    }
+
+    @Override
+    public void cancelTask(int i) {
+        synchronized (this) {
+            CanyonBukkitTask task = tasksById.remove(i);
+            if (task == null) {
+                return;
+            }
+
+            taskQueue.remove(task);
+            task.cancel();
+        }
+    }
+
+    @Override
+    public void cancelTasks(Plugin plugin) {
+        for (BukkitTask pendingTask : getPendingTasks()) {
+            if (pendingTask.getOwner() == plugin) {
+                cancelTask(pendingTask.getTaskId());
+            }
+        }
+    }
+
+    @Override
+    public void cancelAllTasks() {
+        for (BukkitTask pendingTask : getPendingTasks()) {
+            cancelTask(pendingTask.getTaskId());
+        }
+    }
+
+    @Override
+    public boolean isCurrentlyRunning(int i) {
+        // doesn't make sense
+        return false;
+    }
+
+    @Override
+    public boolean isQueued(int i) {
+        return tasksById.get(i) != null;
+    }
+
+    @Override
+    public List<BukkitWorker> getActiveWorkers() {
+        // This method doesn't make sense in a ThreadPoolExecutor world.
+        return Collections.emptyList();
+    }
+
+    @Override
+    public List<BukkitTask> getPendingTasks() {
+        synchronized (this) {
+            return new ArrayList<>(this.tasksById.values());
+        }
+    }
+
+    private CanyonBukkitTask getNextTask() {
+        CanyonBukkitTask task;
+        while (true) {
+            synchronized (this) {
+                task = taskQueue.peek();
+                if (task == null) {
+                    return null;
+                }
+                if (task.isCancelled()) {
+                    taskQueue.remove();
+                    tasksById.remove(task.getTaskId());
+                    continue;
+                }
+
+                if (task.getNextTickExecution() > MinecraftServer.currentTick) {
+                    return null;
+                }
+
+                taskQueue.remove();
+                return task;
+            }
+        }
+    }
+
+    public void runAllPostedTasks() {
+        CanyonBukkitTask task;
+        while ((task = this.getNextTask()) != null) {
+            synchronized (this) {
+                if (task.updateTaskWillRunAgain()) {
+                    taskQueue.add(task);
+                } else {
+                    tasksById.remove(task.getTaskId());
+                }
+            }
+
+            if (task.isSync()) {
+                task.run();
+            } else {
+                asyncExecutor.execute(task);
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 0e8d830f..380a3374 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -15,6 +15,7 @@ import java.net.UnknownHostException;
 
 import com.canyonmodded.network.NettyBootstrap;
 import io.netty.util.concurrent.FastThreadLocalThread;
+import com.canyonmodded.scheduler.CanyonScheduler;
 import jline.ConsoleReader;
 import joptsimple.OptionSet;
 import org.bukkit.World.Environment;
@@ -573,7 +574,8 @@ public class MinecraftServer implements Runnable, ICommandListener {
         }
         // Canyon end
 
-        ((CraftScheduler) this.server.getScheduler()).mainThreadHeartbeat(this.ticks); // CraftBukkit
+        //((CraftScheduler) this.server.getScheduler()).mainThreadHeartbeat(this.ticks); // CraftBukkit // Canyon - new scheduler
+        ((CanyonScheduler) this.server.getScheduler()).runAllPostedTasks(); // Canyon - new scheduler
 
         for (j = 0; j < this.worlds.size(); ++j) { // CraftBukkit
             // if (j == 0 || this.propertyManager.getBoolean("allow-nether", true)) { // CraftBukkit
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 810778b9..c93162e9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -3,6 +3,7 @@ package org.bukkit.craftbukkit;
 import java.io.FileNotFoundException;
 
 import com.canyonmodded.config.CanyonConfig;
+import com.canyonmodded.scheduler.CanyonScheduler;
 import org.bukkit.generator.ChunkGenerator;
 import com.avaje.ebean.config.DataSourceConfig;
 import com.avaje.ebean.config.ServerConfig;
@@ -83,7 +84,7 @@ public final class CraftServer implements Server {
     private final String serverVersion;
     private final String protocolVersion = "1.7.3";
     private final ServicesManager servicesManager = new SimpleServicesManager();
-    private final BukkitScheduler scheduler = new CraftScheduler(this);
+    private final BukkitScheduler scheduler = new CanyonScheduler(); // Canyon // new CraftScheduler(this);
     private final SimpleCommandMap commandMap = new SimpleCommandMap(this);
     private final PluginManager pluginManager = new SimplePluginManager(this, commandMap);
     protected final MinecraftServer console;
-- 
2.24.1.windows.2

